<Project>
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>disable</ImplicitUsings>
    <Nullable>warnings</Nullable>
    <LangVersion>latest</LangVersion>
    <AnalysisLevel>latest</AnalysisLevel>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <IncludeSymbols>true</IncludeSymbols>
    <RunAnalyzersDuringBuild>true</RunAnalyzersDuringBuild>
    <RunAnalyzersDuringLiveAnalysis>true</RunAnalyzersDuringLiveAnalysis>
    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
    <CodeAnalysisTreatWarningsAsErrors>true</CodeAnalysisTreatWarningsAsErrors>
    <ReportAnalyzer>true</ReportAnalyzer>
    <AnalysisMode>All</AnalysisMode>
    <Features>strict</Features>
    <EnableNETAnalyzers>true</EnableNETAnalyzers>
    <InvariantGlobalization>true</InvariantGlobalization>
    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>
    <CentralPackageTransitivePinningEnabled>false</CentralPackageTransitivePinningEnabled>
  </PropertyGroup>


  <PropertyGroup>
    <!-- Set useful custom variables here -->
    <IsExampleProject>false</IsExampleProject>
    <IsExampleProject Condition="$(MSBuildProjectName.StartsWith('Example.'))">true</IsExampleProject>

    <IsCliProject>false</IsCliProject>
    <IsCliProject Condition="$(MSBuildProjectName.StartsWith('Cli.'))">true</IsCliProject>

    <IsNotExampleProject>true</IsNotExampleProject>
    <IsNotExampleProject Condition="$(IsExampleProject)">false</IsNotExampleProject>

    <IsExampleCore>false</IsExampleCore>
    <IsExampleCore Condition="$(MSBuildProjectName.Equals('Example.Core'))">true</IsExampleCore>

    <IsExampleCli>false</IsExampleCli>
    <IsExampleCli Condition="$(IsExampleProject) and !$(IsExampleCore)">true</IsExampleCli>

    <IsTestConvienceBuild>false</IsTestConvienceBuild>
    <IsTestConvienceBuild Condition="$(MSBuildProjectName.StartsWith('TestConvenience.'))">true</IsTestConvienceBuild>

    <IsTestProjectBuild>false</IsTestProjectBuild>
    <IsTestProjectBuild Condition="$(MSBuildProjectName.EndsWith('.Tests'))">true</IsTestProjectBuild>

    <IsUnitTestBuild>false</IsUnitTestBuild>
    <IsUnitTestBuild Condition="$(IsTestProjectBuild)">true</IsUnitTestBuild>

    <IsTestBuild>false</IsTestBuild>
    <IsTestBuild Condition="$(IsTestProjectBuild) or $(IsTestConvienceBuild)">true</IsTestBuild>

    <IsNotTestBuild>true</IsNotTestBuild>
    <IsNotTestBuild Condition="$(IsTestBuild)">false</IsNotTestBuild>

    <IsSdkBuild>false</IsSdkBuild>
    <IsSdkBuild Condition="$(MSBuildProjectName.StartsWith('Sdk.')) and !$(IsTestBuild)">true</IsSdkBuild>

    <TestSourceProjectName Condition="!$(IsTestBuild)">NotATestProject</TestSourceProjectName>
    <TestSourceProjectName Condition="$(IsTestBuild)">$(MSBuildProjectName.Substring(0,$(MSBuildProjectName.LastIndexOf('.'))))</TestSourceProjectName>

  </PropertyGroup>


  <PropertyGroup Condition="$(IsExampleCli)">
    <OutputType>Exe</OutputType>
    <!-- Exclude the project from analysis -->
    <SonarQubeExclude>true</SonarQubeExclude>
  </PropertyGroup>

  <ItemGroup Condition="$(IsExampleCli)">
    <ProjectReference Include="..\Example.Core\Example.Core.csproj" />
  </ItemGroup>
  <ItemGroup Condition="$(IsExampleCli)">
    <PackageReference Include="Premera.VAP.DSI.Internal.UniversalCore" />
  </ItemGroup>

  <PropertyGroup Condition="$(IsTestBuild)">
    <!-- IDE0060 - complaining about unused args -->
    <NoWarn>$(NoWarn);IDE0060;CA1044</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition="$(IsUnitTestBuild)">
    <IsPackable>false</IsPackable>
    <UseVSTest>true</UseVSTest>
  </PropertyGroup>

  <PropertyGroup Condition="$(IsSdkBuild)">
    <CheckEolTargetFramework>false</CheckEolTargetFramework>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <DebugType>embedded</DebugType>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
  </PropertyGroup>

  <ItemGroup Condition="$(IsNotTestBuild)">
    <InternalsVisibleTo Include="$(MSBuildProjectName).Tests" />
  </ItemGroup>

  <ItemGroup Condition="$(IsNotExampleProject) and $(IsNotTestBuild)">
    <InternalsVisibleTo Include="Example$(MSBuildProjectName.Substring($(MSBuildProjectName.IndexOf('.'))))" />
  </ItemGroup>

  <ItemGroup Condition="$(IsTestProjectBuild) and Exists('..\$(TestSourceProjectName)\$(TestSourceProjectName).csproj')">
    <ProjectReference Include="..\$(TestSourceProjectName)\$(TestSourceProjectName).csproj" />
  </ItemGroup>

  <ItemGroup Condition="$(IsUnitTestBuild)">
    <PackageReference Include="coverlet.collector">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Update="AwesomeAssertions.Analyzers">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Update="MSTest.Analyzers">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup Condition="$(IsTestBuild)">
    <PackageReference Include="AwesomeAssertions"/>
  </ItemGroup>

  <ItemGroup Condition="$(IsTestConvienceBuild)">
    <PackageReference Include="MSTest.TestFramework" />
  </ItemGroup>


  <ItemGroup Condition="$(IsTestBuild)">
    <Using Include="Microsoft.VisualStudio.TestTools.UnitTesting" />
    <Using Include="FluentAssertions" />
  </ItemGroup>
</Project>